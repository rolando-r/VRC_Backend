// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(VRC_BackendContext))]
    partial class VRC_BackendContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Afiliacion", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPrestadorServicio")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreAfiliacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdPrestadorServicio");

                    b.ToTable("Afiliaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdDepartamento")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreCiudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdDepartamento");

                    b.ToTable("Ciudades", (string)null);
                });

            modelBuilder.Entity("Dominio.ContactoPersona", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdTipoContacto")
                        .HasColumnType("longtext");

                    b.Property<int>("NroFijo")
                        .HasColumnType("int");

                    b.Property<int>("NroMovil")
                        .HasColumnType("int");

                    b.Property<string>("TipoContactoIdCod")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdPersona");

                    b.HasIndex("TipoContactoIdCod");

                    b.ToTable("ContactoPersonas", (string)null);
                });

            modelBuilder.Entity("Dominio.Departamento", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPais")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreDepartamento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdPais");

                    b.ToTable("Departamentos", (string)null);
                });

            modelBuilder.Entity("Dominio.DetalleFactura", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdFactura")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdRecomendacion")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdFactura");

                    b.HasIndex("IdRecomendacion");

                    b.ToTable("DetalleFacturas", (string)null);
                });

            modelBuilder.Entity("Dominio.Empresa", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.ToTable("Empresas", (string)null);
                });

            modelBuilder.Entity("Dominio.Especialidad", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.ToTable("Especialidades", (string)null);
                });

            modelBuilder.Entity("Dominio.EstadoOrden", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreEstadoOrden")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.ToTable("EstadoOrdenes", (string)null);
                });

            modelBuilder.Entity("Dominio.EstadoParte", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreEstadoParte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.ToTable("EstadoPartes", (string)null);
                });

            modelBuilder.Entity("Dominio.Factura", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumeroFactura")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("IdCod");

                    b.ToTable("Facturas", (string)null);
                });

            modelBuilder.Entity("Dominio.InspeccionParte", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdParteVehiculo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreInspeccionParte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdParteVehiculo");

                    b.ToTable("InspeccionPartes", (string)null);
                });

            modelBuilder.Entity("Dominio.Marca", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreMarca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.ToTable("Marcas", (string)null);
                });

            modelBuilder.Entity("Dominio.Modelo", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdMarca")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreModelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdMarca");

                    b.ToTable("Modelos", (string)null);
                });

            modelBuilder.Entity("Dominio.Movimiento", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("date");

                    b.Property<string>("IdTipoMovimiento")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdTipoMovimiento");

                    b.ToTable("Movimientos", (string)null);
                });

            modelBuilder.Entity("Dominio.Orden", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaOrden")
                        .HasColumnType("date");

                    b.Property<string>("IdEstadoOrden")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdFactura")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdEstadoOrden");

                    b.HasIndex("IdFactura");

                    b.HasIndex("IdPersona");

                    b.ToTable("Ordenes", (string)null);
                });

            modelBuilder.Entity("Dominio.OrdenDiagnostico", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DescripcionDiagnostico")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("IdOrden")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdPersona");

                    b.ToTable("OrdenDiagnosticos", (string)null);
                });

            modelBuilder.Entity("Dominio.OrdenServicio", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdDetalleFact")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdOrden")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdServicio")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdDetalleFact");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdServicio");

                    b.ToTable("OrdenServicios", (string)null);
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombrePais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.ToTable("Paises", (string)null);
                });

            modelBuilder.Entity("Dominio.ParteVehiculo", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdEstadoParte")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreParteVehiculo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdEstadoParte");

                    b.ToTable("ParteVehiculos", (string)null);
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("IdSucursal")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdTipoPersona")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdSucursal");

                    b.HasIndex("IdTipoPersona");

                    b.ToTable("Personas", (string)null);
                });

            modelBuilder.Entity("Dominio.PersonaAfiliacion", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdAfiliacion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdAfiliacion");

                    b.HasIndex("IdPersona");

                    b.ToTable("PersonaAfiliaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.PersonaEspecialidad", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdEspecialidad")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdEspecialidad");

                    b.HasIndex("IdPersona");

                    b.ToTable("PersonaEspecialidades", (string)null);
                });

            modelBuilder.Entity("Dominio.PersonaServicio", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdServicio")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdPersona");

                    b.HasIndex("IdServicio");

                    b.ToTable("PersonaServicios", (string)null);
                });

            modelBuilder.Entity("Dominio.PrestadorServicio", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdTipoPrestadorSer")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombrePrestadorServicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdTipoPrestadorSer");

                    b.ToTable("PrestadorServicios", (string)null);
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("IdMovimiento")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdTipoProducto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PrecioVenta")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdCod");

                    b.HasIndex("IdMovimiento");

                    b.HasIndex("IdPersona");

                    b.HasIndex("IdTipoProducto");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("Dominio.ProductoOrdenSer", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoProdOrdenSer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("IdOrdenServicio")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdProducto")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PrecioUnitario")
                        .HasColumnType("int");

                    b.HasKey("IdCod");

                    b.HasIndex("IdOrdenServicio");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductoOrdenSers", (string)null);
                });

            modelBuilder.Entity("Dominio.Recomendacion", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DescripcionRec")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("IdCod");

                    b.ToTable("Recomendaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Servicio", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdTipoServicio")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreServicio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdTipoServicio");

                    b.ToTable("Servicios", (string)null);
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdCiudad")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdContactoPersona")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdEmpresa")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreSucursal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdContactoPersona");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Sucursales", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoContacto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoContactos", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoMovimiento", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoMovimientos", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoPersona", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoPersona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoPersonas", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoPrestadorSer", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoPrestadorSer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoPrestadorSers", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoProducto", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoProducto")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoProductos", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoServicio", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoServicio")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoServicios", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoVehiculo", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreTipoVehiculo")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("IdCod");

                    b.ToTable("TipoVehiculos", (string)null);
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.Property<string>("IdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdInspeccionParte")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdModelo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdOrden")
                        .HasColumnType("longtext");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdTipoVehiculo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrdenIdCod")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdCod");

                    b.HasIndex("IdInspeccionParte");

                    b.HasIndex("IdModelo");

                    b.HasIndex("IdPersona");

                    b.HasIndex("IdTipoVehiculo");

                    b.HasIndex("OrdenIdCod");

                    b.ToTable("Vehiculos", (string)null);
                });

            modelBuilder.Entity("Dominio.Afiliacion", b =>
                {
                    b.HasOne("Dominio.PrestadorServicio", "PrestadorServicio")
                        .WithMany("Afiliaciones")
                        .HasForeignKey("IdPrestadorServicio");

                    b.Navigation("PrestadorServicio");
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.HasOne("Dominio.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepartamento");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.ContactoPersona", b =>
                {
                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("ContactoPersonas")
                        .HasForeignKey("IdPersona");

                    b.HasOne("Dominio.TipoContacto", "TipoContacto")
                        .WithMany("ContactoPersonas")
                        .HasForeignKey("TipoContactoIdCod");

                    b.Navigation("Persona");

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("Dominio.Departamento", b =>
                {
                    b.HasOne("Dominio.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPais");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.DetalleFactura", b =>
                {
                    b.HasOne("Dominio.Factura", "Factura")
                        .WithMany("DetalleFacturas")
                        .HasForeignKey("IdFactura");

                    b.HasOne("Dominio.Recomendacion", "Recomendacion")
                        .WithMany("DetalleFacturas")
                        .HasForeignKey("IdRecomendacion");

                    b.Navigation("Factura");

                    b.Navigation("Recomendacion");
                });

            modelBuilder.Entity("Dominio.InspeccionParte", b =>
                {
                    b.HasOne("Dominio.ParteVehiculo", "ParteVehiculo")
                        .WithMany("InspeccionPartes")
                        .HasForeignKey("IdParteVehiculo");

                    b.Navigation("ParteVehiculo");
                });

            modelBuilder.Entity("Dominio.Modelo", b =>
                {
                    b.HasOne("Dominio.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("IdMarca");

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("Dominio.Movimiento", b =>
                {
                    b.HasOne("Dominio.TipoMovimiento", "TipoMovimiento")
                        .WithMany("Movimientos")
                        .HasForeignKey("IdTipoMovimiento");

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("Dominio.Orden", b =>
                {
                    b.HasOne("Dominio.EstadoOrden", "EstadoOrden")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdEstadoOrden");

                    b.HasOne("Dominio.Factura", "Factura")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdFactura");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdPersona");

                    b.Navigation("EstadoOrden");

                    b.Navigation("Factura");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.OrdenDiagnostico", b =>
                {
                    b.HasOne("Dominio.Orden", "Orden")
                        .WithMany("OrdenDiagnosticos")
                        .HasForeignKey("IdOrden");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("OrdenDiagnosticos")
                        .HasForeignKey("IdPersona");

                    b.Navigation("Orden");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.OrdenServicio", b =>
                {
                    b.HasOne("Dominio.DetalleFactura", "DetalleFactura")
                        .WithMany("OrdenServicios")
                        .HasForeignKey("IdDetalleFact");

                    b.HasOne("Dominio.Orden", "Orden")
                        .WithMany("OrdenServicios")
                        .HasForeignKey("IdOrden");

                    b.HasOne("Dominio.Servicio", "Servicio")
                        .WithMany("OrdenServicios")
                        .HasForeignKey("IdServicio");

                    b.Navigation("DetalleFactura");

                    b.Navigation("Orden");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Dominio.ParteVehiculo", b =>
                {
                    b.HasOne("Dominio.EstadoParte", "EstadoParte")
                        .WithMany("ParteVehiculos")
                        .HasForeignKey("IdEstadoParte");

                    b.Navigation("EstadoParte");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Personas")
                        .HasForeignKey("IdSucursal");

                    b.HasOne("Dominio.TipoPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoPersona");

                    b.Navigation("Sucursal");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Dominio.PersonaAfiliacion", b =>
                {
                    b.HasOne("Dominio.Afiliacion", "Afiliacion")
                        .WithMany("PersonaAfiliaciones")
                        .HasForeignKey("IdAfiliacion");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("PersonaAfiliaciones")
                        .HasForeignKey("IdPersona");

                    b.Navigation("Afiliacion");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.PersonaEspecialidad", b =>
                {
                    b.HasOne("Dominio.Especialidad", "Especialidad")
                        .WithMany("PersonaEspecialidades")
                        .HasForeignKey("IdEspecialidad");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("PersonaEspecialidades")
                        .HasForeignKey("IdPersona");

                    b.Navigation("Especialidad");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.PersonaServicio", b =>
                {
                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("PersonaServicios")
                        .HasForeignKey("IdPersona");

                    b.HasOne("Dominio.Servicio", "Servicio")
                        .WithMany("PersonaServicios")
                        .HasForeignKey("IdServicio");

                    b.Navigation("Persona");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Dominio.PrestadorServicio", b =>
                {
                    b.HasOne("Dominio.TipoPrestadorSer", "TipoPrestadorSer")
                        .WithMany("PrestadorServicios")
                        .HasForeignKey("IdTipoPrestadorSer");

                    b.Navigation("TipoPrestadorSer");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.HasOne("Dominio.Movimiento", "Movimiento")
                        .WithMany("Productos")
                        .HasForeignKey("IdMovimiento");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Productos")
                        .HasForeignKey("IdPersona");

                    b.HasOne("Dominio.TipoProducto", "TipoProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdTipoProducto");

                    b.Navigation("Movimiento");

                    b.Navigation("Persona");

                    b.Navigation("TipoProducto");
                });

            modelBuilder.Entity("Dominio.ProductoOrdenSer", b =>
                {
                    b.HasOne("Dominio.OrdenServicio", "OrdenServicio")
                        .WithMany("ProductoOrdenSers")
                        .HasForeignKey("IdOrdenServicio");

                    b.HasOne("Dominio.Producto", "Producto")
                        .WithMany("ProductoOrdenSers")
                        .HasForeignKey("IdProducto");

                    b.Navigation("OrdenServicio");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Servicio", b =>
                {
                    b.HasOne("Dominio.TipoServicio", "TipoServicio")
                        .WithMany("Servicios")
                        .HasForeignKey("IdTipoServicio");

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.HasOne("Dominio.Ciudad", "Ciudad")
                        .WithMany("Sucursales")
                        .HasForeignKey("IdCiudad");

                    b.HasOne("Dominio.ContactoPersona", "ContactoPersona")
                        .WithMany("Sucursales")
                        .HasForeignKey("IdContactoPersona");

                    b.HasOne("Dominio.Empresa", "Empresa")
                        .WithMany("Sucursales")
                        .HasForeignKey("IdEmpresa");

                    b.Navigation("Ciudad");

                    b.Navigation("ContactoPersona");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.HasOne("Dominio.InspeccionParte", "InspeccionParte")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdInspeccionParte");

                    b.HasOne("Dominio.Modelo", "Modelo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdModelo");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdPersona");

                    b.HasOne("Dominio.TipoVehiculo", "TipoVehiculo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdTipoVehiculo");

                    b.HasOne("Dominio.Orden", "Orden")
                        .WithMany()
                        .HasForeignKey("OrdenIdCod");

                    b.Navigation("InspeccionParte");

                    b.Navigation("Modelo");

                    b.Navigation("Orden");

                    b.Navigation("Persona");

                    b.Navigation("TipoVehiculo");
                });

            modelBuilder.Entity("Dominio.Afiliacion", b =>
                {
                    b.Navigation("PersonaAfiliaciones");
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.ContactoPersona", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.DetalleFactura", b =>
                {
                    b.Navigation("OrdenServicios");
                });

            modelBuilder.Entity("Dominio.Empresa", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.Especialidad", b =>
                {
                    b.Navigation("PersonaEspecialidades");
                });

            modelBuilder.Entity("Dominio.EstadoOrden", b =>
                {
                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("Dominio.EstadoParte", b =>
                {
                    b.Navigation("ParteVehiculos");
                });

            modelBuilder.Entity("Dominio.Factura", b =>
                {
                    b.Navigation("DetalleFacturas");

                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("Dominio.InspeccionParte", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("Dominio.Modelo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Movimiento", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Orden", b =>
                {
                    b.Navigation("OrdenDiagnosticos");

                    b.Navigation("OrdenServicios");
                });

            modelBuilder.Entity("Dominio.OrdenServicio", b =>
                {
                    b.Navigation("ProductoOrdenSers");
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Dominio.ParteVehiculo", b =>
                {
                    b.Navigation("InspeccionPartes");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Navigation("ContactoPersonas");

                    b.Navigation("OrdenDiagnosticos");

                    b.Navigation("Ordenes");

                    b.Navigation("PersonaAfiliaciones");

                    b.Navigation("PersonaEspecialidades");

                    b.Navigation("PersonaServicios");

                    b.Navigation("Productos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.PrestadorServicio", b =>
                {
                    b.Navigation("Afiliaciones");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Navigation("ProductoOrdenSers");
                });

            modelBuilder.Entity("Dominio.Recomendacion", b =>
                {
                    b.Navigation("DetalleFacturas");
                });

            modelBuilder.Entity("Dominio.Servicio", b =>
                {
                    b.Navigation("OrdenServicios");

                    b.Navigation("PersonaServicios");
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Navigation("ContactoPersonas");
                });

            modelBuilder.Entity("Dominio.TipoMovimiento", b =>
                {
                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("Dominio.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.TipoPrestadorSer", b =>
                {
                    b.Navigation("PrestadorServicios");
                });

            modelBuilder.Entity("Dominio.TipoProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.TipoServicio", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("Dominio.TipoVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
